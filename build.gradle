// Gradle build script for Maven artifacts and non-Android native libraries

plugins {
    id 'cpp'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

ext {
    group = 'com.github.stephengold'
    artifact = 'Libbulletjme'
    version = '12.5.0'
    baseName = "${artifact}-${version}"
    websiteUrl = 'https://github.com/stephengold/Libbulletjme'
}

description = 'a JNI interface for Bullet Physics and V-HACD'

sourceSets.main.java {
    srcDir 'src/main/java'
    srcDir 'src/main/native' // for IDE access (no Java there)
}

sourceSets.test.java {
    srcDir 'src/test/java'
}

// Regenerate all JNI header files before compiling any C++ source code.
tasks.withType(CppCompile) {
    dependsOn('classes')
}

String javaHome = org.gradle.internal.jvm.Jvm.current().javaHome.absolutePath
model {
    buildTypes {
        Debug
        Release
    }

    flavors {
        Sp            // single-precision arithmetic
        SpMt          // single-precision arithmetic, multithreaded
        SpMtQuickprof // single-precision arithmetic, multithreaded, Quickprof profiling
        SpQuickprof   // single-precision arithmetic, Quickprof profiling
        Dp   // double-precision arithmetic
        DpMt // double-precision arithmetic, multithreaded
    }

    platforms {
        Linux32 {
            architecture 'x86'
            operatingSystem 'linux'
        }
        Linux64 {
            architecture 'x86_64'
            operatingSystem 'linux'
        }
        Linux_ARM32 {
            architecture 'armel'
            operatingSystem 'linux'
        }
        Linux_ARM32hf {
            architecture 'armhf'
            operatingSystem 'linux'
        }
        Linux_ARM64 {
            architecture 'aarch64'
            operatingSystem 'linux'
        }
        MacOSX32 {
            architecture 'x86'
            operatingSystem 'osx'
        }
        MacOSX64 {
            architecture 'x86_64'
            operatingSystem 'osx'
        }
        Windows32 {
            architecture 'x86'
            operatingSystem 'windows'
        }
        Windows64 {
            architecture 'x86_64'
            operatingSystem 'windows'
        }
    }

    toolChains { // prioritize among the native toolchains
        visualCpp(VisualCpp)
        //clang(Clang)
        gcc(Gcc)
        clang(Clang)
        gcc5Arm32(Gcc) {
            target('Linux_ARM32') {
                cppCompiler.executable = 'arm-linux-gnueabi-g++-5'
                linker.executable = 'arm-linux-gnueabi-g++-5'
            }
        }
        gcc5Arm32hf(Gcc) {
            target('Linux_ARM32hf') {
                cppCompiler.executable = 'arm-linux-gnueabihf-g++-5'
                linker.executable = 'arm-linux-gnueabihf-g++-5'
            }
        }
        gccArm64(Gcc) {
            target('Linux_ARM64') {
                cppCompiler.executable = 'aarch64-linux-gnu-g++'
                linker.executable = 'aarch64-linux-gnu-g++'
            }
        }
        gcc8Arm64(Gcc) {
            target('Linux_ARM64') {
                cppCompiler.executable = 'aarch64-linux-gnu-g++-8'
                linker.executable = 'aarch64-linux-gnu-gcc-8'
            }
        }
    }

    components {
        bulletjme(NativeLibrarySpec) {
            targetPlatform 'Linux32'
            targetPlatform 'Linux64'
            targetPlatform 'Linux_ARM32'
            targetPlatform 'Linux_ARM32hf'
            targetPlatform 'Linux_ARM64'
            targetPlatform 'MacOSX32'
            targetPlatform 'MacOSX64'
            targetPlatform 'Windows32'
            targetPlatform 'Windows64'

            sources.cpp.source {
                srcDir 'src/main/native/bullet3'
                srcDir 'src/main/native/glue'
                srcDir 'src/main/native/v-hacd/src'
                include '**/*.cpp'
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                Boolean isDebug = (buildType == buildTypes.Debug)
                Boolean isMt = (flavor == flavors.SpMt || flavor == flavors.SpMtQuickprof || flavor == flavors.DpMt)
                // Decide whether to build for the target platform:
                if (project.hasProperty('github')) {
                    // -Pgithub= specified on the command line
                    String github = project.ext.github
                    if (github.equals('xcode11')) { // typically Xcode_12.4
                        buildable = isDebug && (flavor == flavors.Sp) && targetPlatform.name.equals('MacOSX64')
                    } else if (github.equals('debug64')) {
                        buildable = isDebug && targetPlatform.name.contains('64') && !targetPlatform.name.startsWith('Linux_ARM')
                    }
                } else if (project.hasProperty('travis')) {
                    // -Ptravis= specified on the command line
                    String travis = project.ext.travis
                    if (travis.equals('amd64')) { // using g++-4.7, so skip Mt flavors
                        buildable = (!isMt) && !targetPlatform.name.startsWith('Linux_ARM')
                    } else if (travis.equals('amd64mt')) { // use g++-5 to build Mt flavors
                        buildable = isMt && targetPlatform.name.equals('Linux64')
                    } else if (travis.equals('arm32')) {
                        buildable = targetPlatform.name.equals('Linux_ARM32')
                    } else if (travis.equals('arm32hf')) {
                        buildable = targetPlatform.name.equals('Linux_ARM32hf')
                    } else if (travis.equals('arm64')) {
                        buildable = targetPlatform.name.equals('Linux_ARM64')
                    } else if (travis.equals('osx')) { // using xcode9.3 for its 32-bit support
                        buildable = targetPlatform.name.startsWith('MacOSX')
                    }
                } else { // neither -Pgithub= nor -Ptravis= specified
                    buildable = !targetPlatform.name.startsWith('Linux_ARM')
                    //buildable = targetPlatform.name.equals('Linux64') // to skip all except Linux64
                    //buildable = targetPlatform.name.equals('Windows64') // to skip all except Windows64
                }

                Boolean isDp = (flavor == flavors.Dp || flavor == flavors.DpMt)
                Boolean isQuickprof = (flavor == flavors.SpMtQuickprof || flavor == flavors.SpQuickprof);
                if (buildable) {
                    // Decide whether to build the current flavor:
                    if (project.hasProperty('flavor')) {
                        // -Pflavor= specified on the command line
                        String flavorArg = project.ext.flavor
                        buildable = flavor.name.equals(flavorArg)
                    } else if (isMt) {
                        // Skip Mt for MacOSX (Xcode does not support OpenMP) and 32-bit targets
                        buildable = targetPlatform.name.contains('64') && !targetPlatform.name.startsWith('MacOSX')
                    }
                    //if (isDp) buildable = false // to skip all double-precision flavors
                    //if (isMt) buildable = false // to skip all multithreaded flavors
                    if (isQuickprof) buildable = false // to skip all Quickprof flavors
                }

                if (isDebug) {
                    cppCompiler.define '_DEBUG'
                    //cppCompiler.define 'BT_DEBUG_MEMORY_ALLOCATIONS'
                    //cppCompiler.define 'DEBUG_PERSISTENCY'
                }
                if (isDp) {
                    cppCompiler.define 'BT_USE_DOUBLE_PRECISION'
                }
                if (isMt) {
                    cppCompiler.define 'BT_THREADSAFE'
                    cppCompiler.define 'BT_USE_OPENMP'
                }
                if (isQuickprof) {
                    cppCompiler.define 'BT_ENABLE_PROFILE'
                    //cppCompiler.define 'BT_LINUX_REALTIME'
                }

                String q = targetPlatform.name + buildType.name + flavor.name
                if (toolChain in VisualCpp) {
                    cppCompiler.define 'WIN32'
                    cppCompiler.args '/EHsc' // synchronous exceptions only
                    cppCompiler.args "/I$javaHome/include"
                    cppCompiler.args "/I$javaHome/include/win32"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/BulletDynamics/Featherstone"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/public"
                    if (isDebug) {
                        cppCompiler.args '/FS' // serialize PDB writes
                        cppCompiler.args '/MTd' // use LIBCMTD
                        cppCompiler.args '/Zi' // produce PDB file
                        linker.args '/DEBUG'
                        if (buildable) {
                            String pdbFile = 'build/libs/bulletjme/shared/'
                            pdbFile += targetPlatform.name + '/debug/'
                            pdbFile += flavor.name + '/bulletjme.pdb'

                            task "copyPdbToDist$q" (type: Copy, dependsOn:
                                 "bulletjme${q}SharedLibrary") {
                                from pdbFile
                                rename { String filename ->
                                    return q + '_' + filename
                                }
                                into 'dist'
                            }
                            jar.dependsOn("copyPdbToDist$q")
                        }
                    } else { // buildType == Release
                        cppCompiler.args '/O2'
                        cppCompiler.args '/Ob3'
                    }
                    if (isMt) {
                        cppCompiler.args '/openmp'
                    }

                } else { // toolChain in Clang or Gcc
                    cppCompiler.args '-I', "$javaHome/include"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/BulletDynamics/Featherstone"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/public"
                    cppCompiler.args '-std=c++11' // ignored by g++-4.7
                    if (isDebug) {
                        cppCompiler.args '-O0', '-g3'
                    } else { // buildType == Release
                        cppCompiler.args '-O3'
                    }
                    if (isMt) {
                        cppCompiler.args '-fopenmp'
                        linker.args '-lgomp'
                    }

                    String os = targetPlatform.operatingSystem.name
                    if (os == 'osx') {
                        cppCompiler.args '-I', "$javaHome/include/darwin"
                    } else if (os == 'linux') {
                        cppCompiler.args '-I', "$javaHome/include/linux"
                        cppCompiler.args '-fPIC'
                        cppCompiler.args '-fvisibility=hidden'
                        linker.args '-fvisibility=hidden'
                    } else if (os == 'windows') { // not tested recently
                        cppCompiler.define 'WIN32'
                        cppCompiler.args '-I', "$javaHome/include/win32"
                        cppCompiler.args '-static'
                        linker.args '-static'
                        linker.args '-Wl,--exclude-all-symbols'
                    } else {
                        buildable = false
                    }
                }

                if (buildable) {
                    println 'Build ' + q + ' using ' + toolChain

                    task "copyToDist$q" (type: Copy, dependsOn:
                         "bulletjme${q}SharedLibrary") {
                        from sharedLibraryFile
                        rename { String filename ->
                            return q + '_' + filename
                        }
                        into 'dist'
                    }
                    jar.dependsOn('copyToDist' + q)
                } else {
                    //println 'Do not build ' + q
                }
            }
        }
    }
}

description = 'JNI interface to Bullet Physics and V-HACD'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile) { // compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.headerOutputDirectory = new File('src/main/native/glue')
}

test.dependsOn('assemble')
assemble.dependsOn('copyToDistJars')
task copyToDistJars (type: Copy) {
    dependsOn 'jar', 'javadocJar', 'signArchives', 'sourcesJar'
    from 'build/libs'
    include '*.jar', '*.jar.asc'
    into 'dist'
}

// custom tasks for creating source/javadoc JARs
jar {
    archiveBaseName = project.ext.baseName
}

task javadocJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description 'Creates a JAR of Java sourcecode.'
    from 'src/main/java'
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar, javadocJar, sourcesJar
}

build.dependsOn('pom', 'pomAsc')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to dist.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into 'dist'
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
task('pomAsc', type: Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the Maven POM to dist.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into 'dist'
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId artifact
            from components.java
            groupId project.ext.group
            pom {
                description = project.description
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Libbulletjme.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Libbulletjme.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = project.ext.websiteUrl
            }
            version project.ext.version
        }
    }
}

// signing tasks

signing {
    sign configurations.archives
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signing.keyId') }
}

// cleanup tasks

clean.dependsOn('cleanCxx', 'cleanDist', 'cleanLogs')
task cleanCxx(type: Delete) {
    delete '.cxx'
}
task cleanDist(type: Delete) {
    delete 'dist'
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
