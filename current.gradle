// Gradle script to build Maven artifacts and native libraries for the current platform

plugins {
    id 'cpp'
    id 'java-library'
    id 'maven-publish'
}

ext {
    group = 'com.github.stephengold'
    artifact = 'Libbulletjme'
    version = '16.3.0'
    baseName = "${artifact}-${version}"
    websiteUrl = 'https://github.com/stephengold/Libbulletjme'
}

sourceSets.test.java {
    srcDir 'src/test/java'
}

// Regenerate all JNI header files before compiling any C++ source code.
tasks.withType(CppCompile) {
    dependsOn('classes', 'compileTestJava')
}

String javaHome = org.gradle.internal.jvm.Jvm.current().javaHome.absolutePath
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

model {
    buildTypes {
        Debug
        Release
    }

    flavors {
        Sp            // single-precision arithmetic
        SpMt          // single-precision arithmetic, multithreaded
        SpMtQuickprof // single-precision arithmetic, multithreaded, Quickprof profiling
        SpQuickprof   // single-precision arithmetic, Quickprof profiling
        Dp   // double-precision arithmetic
        DpMt // double-precision arithmetic, multithreaded
    }

    platforms {
        Linux_ARM64 {
            architecture 'aarch64'
            operatingSystem 'linux'
        }
        MacOSX_ARM64 {
            architecture 'arm-v8'
            operatingSystem 'osx'
        }
    }

    toolChains { // prioritize among the native toolchains
        visualCpp(VisualCpp)
        //clang(Clang) // to favor Clang over Gcc
        gcc(Gcc)
        clang(Clang) {
            target('MacOSX_ARM64')
        }
    }

    components {
        bulletjme(NativeLibrarySpec) {
            if (isMacOS) {
                targetPlatform 'MacOSX_ARM64' // to build on Apple Silicon
            }

            sources.cpp.source {
                srcDir 'src/main/native/bullet3'
                srcDir 'src/main/native/glue'
                srcDir 'src/main/native/v-hacd/src'
                include '**/*.cpp'
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                Boolean isDebug = (buildType == buildTypes.Debug)
                Boolean isMt = (flavor == flavors.SpMt || flavor == flavors.SpMtQuickprof || flavor == flavors.DpMt)
                String pName = targetPlatform.name
                //println " - $pName  $buildType  $flavor" // to debug this script

                Boolean isDp = (flavor == flavors.Dp || flavor == flavors.DpMt)
                Boolean isQuickprof = (flavor == flavors.SpMtQuickprof || flavor == flavors.SpQuickprof)
                String os = targetPlatform.operatingSystem.name
                if (buildable) {
                    // Decide whether to build the current flavor:
                    if (project.hasProperty('flavor')) {
                        // -Pflavor= specified on the command line
                        String flavorArg = project.ext.flavor
                        buildable = (flavor.name == flavorArg)
                    } else if (isMt) {
                        // Skip Mt for MacOSX (Xcode does not support OpenMP)
                        buildable = (os != 'osx')
                    }
                    //if (isDp) buildable = false // to skip all double-precision flavors
                    //if (isMt) buildable = false // to skip all multithreaded flavors
                    if (isQuickprof) buildable = false // to skip all Quickprof flavors
                }

                if (isDebug) {
                    cppCompiler.define '_DEBUG'
                    //cppCompiler.define 'BT_ADDITIONAL_DEBUG'
                    //cppCompiler.define 'BT_DEBUG_MEMORY_ALLOCATIONS'
                    //cppCompiler.define 'DEBUG_PERSISTENCY'
                    //cppCompiler.define 'VERBOSE_RESIDUAL_PRINTF'
                }
                if (isDp) {
                    cppCompiler.define 'BT_USE_DOUBLE_PRECISION'
                }
                if (isMt) {
                    cppCompiler.define 'BT_THREADSAFE'
                    cppCompiler.define 'BT_USE_OPENMP'
                }
                if (isQuickprof) {
                    cppCompiler.define 'BT_ENABLE_PROFILE'
                    //cppCompiler.define 'BT_LINUX_REALTIME'
                }

                String q = pName + buildType.name + flavor.name
                if (toolChain in VisualCpp) {
                    cppCompiler.define 'WIN32'
                    cppCompiler.args '/EHsc' // synchronous exceptions only
                    cppCompiler.args "/I$javaHome/include"
                    cppCompiler.args "/I$javaHome/include/win32"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/BulletDynamics/Featherstone"
                    cppCompiler.args "/I$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args "/I$projectDir/src/main/native/v-hacd/public"
                    if (isDebug) {
                        cppCompiler.args '/FS' // serialize PDB writes
                        cppCompiler.args '/MTd' // use LIBCMTD
                        cppCompiler.args '/Zi' // produce PDB file
                        linker.args '/DEBUG'
                    } else { // buildType == Release
                        cppCompiler.args '/O2'
                        cppCompiler.args '/Ob3'
                    }
                    if (isMt) {
                        cppCompiler.args '/openmp'
                    }

                } else { // toolChain in Clang or Gcc
                    cppCompiler.args '-I', "$javaHome/include"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/BulletDynamics/Featherstone"
                    cppCompiler.args '-I', "$projectDir/src/main/native/bullet3/LinearMath"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/inc"
                    cppCompiler.args '-I', "$projectDir/src/main/native/v-hacd/public"
                    cppCompiler.args '-std=c++11'
                    if (isDebug) {
                        cppCompiler.args '-O0', '-g3'
                    } else { // buildType == Release
                        cppCompiler.args '-O3'
                    }
                    if (isMt) {
                        cppCompiler.args '-fopenmp'
                        linker.args '-lgomp'
                    }

                    if (os == 'osx') {
                        cppCompiler.args '-I', "$javaHome/include/darwin"
                    } else if (os == 'linux') {
                        cppCompiler.args '-I', "$javaHome/include/linux"
                        cppCompiler.args '-fPIC'
                        cppCompiler.args '-fvisibility=hidden'
                        linker.args '-fvisibility=hidden'
                    } else if (os == 'windows') { // not tested recently
                        cppCompiler.define 'WIN32'
                        cppCompiler.args '-I', "$javaHome/include/win32"
                        cppCompiler.args '-static'
                        linker.args '-static'
                        linker.args '-Wl,--exclude-all-symbols'
                    } else {
                        buildable = false
                    }
                }

                if (buildable) {
                    println 'Build ' + q + ' using ' + toolChain
                } else {
                    //println 'Do not build ' + q // to debug this script
                }
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    options.headerOutputDirectory = new File('src/main/native/glue')
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

repositories {
    mavenCentral()
}

test.dependsOn('assemble')

// publishing tasks

tasks.register('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description 'Installs Maven artifacts to the local repository.'
}

assemble.dependsOn('copyToDistJars')
tasks.register('copyToDistJars', Copy) {
    dependsOn 'jar', 'javadocJar', 'sourcesJar'
    from 'build/libs'
    include '*.jar'
    into 'dist'
}

jar {
    archiveBaseName = project.ext.baseName
}
tasks.register('javadocJar', Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}
tasks.register('sourcesJar', Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description 'Creates a JAR of Java sourcecode.'
    from 'src/main/java'
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar, javadocJar, sourcesJar
}
javadoc.dependsOn('compileTestJava')

assemble.dependsOn('module', 'pom')
tasks.register('module', Copy) {
    dependsOn 'generateMetadataFileForMavenPublication'
    description 'Copies the module metadata to dist.'
    from "${buildDir}/publications/maven/module.json"
    into 'dist'
    rename 'module.json', project.ext.baseName + '.module'
}
tasks.register('pom', Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to dist.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into 'dist'
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId artifact
            from components.java
            groupId project.ext.group
            pom {
                description = 'a JNI interface for Bullet Physics and V-HACD'
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Libbulletjme.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Libbulletjme.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = project.ext.websiteUrl
            }
            version project.ext.version
        }
    }
}
publishMavenPublicationToMavenLocal.dependsOn('assemble')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}

// cleanup tasks:

clean.dependsOn('cleanCxx', 'cleanDist', 'cleanLogs')

tasks.register('cleanCxx', Delete) {
    delete '.cxx'
}
tasks.register('cleanDist', Delete) { // files to be distributed
    delete 'dist'
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
